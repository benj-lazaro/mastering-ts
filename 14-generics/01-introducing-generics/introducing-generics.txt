Introducing Generics
--------------------
- Generics are a special feature that allows
    - To define a reusable class or function that
        - Can work with multiple types
        
        - NOTE: These are NOT Union Types
            - Since they are NOT hard-coded

    - Wherein it can accept any type then
        - Return the same type


- A built-in Generic representative would be the Array's alternative syntax
    - Calls the interface "Array"

    - Followed by the type of its stored elements
        - Enclosed within a pair of <>
        - e.g. Array<number>, Array<string>, Array<boolean>

    - In VS Code, hovering the mouse point over "Array"
        - Displays the text

            interface Array<T>

        - The "T" represents a Generic Type
            - It represents the type that will be passed on its place

    - This demonstrates how the interface "Array"
        - Is written in a generic way wherein
        - It accepts any type (as input)
        - It stores the elements (in return) based on the given type
